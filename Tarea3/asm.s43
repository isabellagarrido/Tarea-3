#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module

        ORG     0FFE8h                  ; vector for TIMER_A0
        DC16    TIMER_A0_ISR            ; set vector for 'TIMER_A0_ISR' routine
        
        ORG     0FFDAh                  ; vector for PORT1
        DC16    PORT1_ISR               ; set vector for 'PORT1_ISR' routine
        
        ORG     0FFFEh                  ; vector for RESET
        DC16    init                    ; set reset vector to 'init' label

        ORG     0x01C00                 ; Start of RAM

pushCount dw    0                       ;Counter for how many times button S1 is pressed
;------------------------------------------------------------------------------
; We need counters for the following delays:
; * Quarter Seconds     (2 eight cycles)
; * Half Seconds        (4 eight cycles, 2 quarter cycles)
; * Seconds             (8 eight cycles, 4 quarter, 2 half)
; * Two Seconds         (16 eight cycles, 8 quarter, 4 half, 2 seconds)
; * Five Seconds        (40 eight cycles, 20 quarter, 10 half, 5 seconds)

quarterCount    DB 0
halfCount       DB 0
secondCount     DB 0
twoSecCount     DB 0
fiveSecCount    DB 0

;------------------------------------------------------------------------------

;Letters and Symbols
;            A     B     C     D     E     F     G     H     I     J     K     L     M     N     O     P     Q     R     S     T     U     V     W     X     Y     Z   NONE    -     >     ?
;            0     1     2     3     4     5     6     7     8     9     10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25   26    27    28    29   
CharH   db 0xEF, 0xF1, 0x9C, 0xF0, 0x9F, 0x8E, 0xBD, 0x6F, 0x00, 0x78, 0x0E, 0x1C, 0x6C, 0x6C, 0xFC, 0xCF, 0xFC, 0xCF, 0xB7, 0x80, 0x7C, 0x0C, 0x6C, 0x00, 0x00, 0x90, 0x00, 0x03, 0x00, 0xC5
 
; CharH index:     30    31    32    33    34    35    36    37    38    39
               ;    0     1     2     3     4     5     6     7     8     9
digitH          DB 0xFC, 0x60, 0xDB, 0xF3, 0x67, 0xB7, 0xBF, 0x80, 0xFF, 0xF7

CharL   db 0x00, 0x50, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x22, 0x00, 0xB0, 0x82, 0x00, 0x00, 0x02, 0x02, 0x00, 0x50, 0x00, 0x28, 0x0A, 0xAA, 0xB0, 0x28, 0x00, 0x00, 0x88, 0x10
digitL          DB 0x28, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00

;------------------------------------------------------------------------------
; Display Strings
; Array of CharH and CharL INDICES

; Authors/Developers
jann            DB      9, 0, 13, 13, 26, 26
isabel          DB      8, 18, 0, 1, 4, 11
vandie          DB      21, 0, 13, 3, 8, 4
ricard          DB      17, 8, 2, 0, 17, 3

; The funny
dracir          DB      3, 17, 0, 2, 8, 17
uimerf          DB      20, 8, 12, 4, 17, 5
oravan          DB      16, 17, 0, 21, 0, 13

; Array of string addresses
names           DB      ricard, jann, isabel, vandie, dracir, uimerf, oravan

; Misc. Titles
kasino          DB      10, 0, 18, 8, 13, 14
record          DB      17, 4, 2, 14, 17, 3
test            DB      19, 4, 18, 19, 26, 26       
player          DB      15, 11, 0, 24, 4, 17
mode            DB      12, 14, 3, 4, 26, 26    ; NOTE: To make Y/N appear after mode
                                                ; edit @mode+5 (the final position)

pro             DB      15, 17, 14, 26, 26, 26
s2clr           DB      18, 32, 2, 11, 17, 26
perdio          DB      15, 4, 17, 3, 8, 14
gano            DB      6, 0, 13, 14, 26, 26

; LCD Offsets
LCD_offsets db 9, 5, 3, 18, 14, 7




;------------------------------------------------------------------------------
   

intsCounter     DW 0                    ; TIMER_A0 interrupts counter

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer

        mov     #0, intsCounter         ; Clear intsCounter
        bis.b   #0FDh, &P1DIR           ; Port 1.1 for button input, all other as output
        bis.b   #0FFh, &P2DIR           ; All Port 2 pins as output
	bis.b   #0FFh, &P9DIR           ; All Port 9 pins as output
        bis.b   #00000001b, &P1OUT      ; Turn on red LED
        bic.b 	#0x80, P9OUT		; Turn off green LED

	bis.b   #02h, &P1OUT		; P1.1 Resistor enabled as pullup
        bis.b   #02h, &P1REN            ; resistor. Push is read as 0 and else 1

        bis.b   #02h, &P1IES            ; Int generated on high to low transition
        bis.b   #02h, &P1IE             ; Enable interrupt at P1.1


UnlockGPIO:
        bic.w   #LOCKLPM5,&PM5CTL0      ; Disable the GPIO power-on default
                                        ; high-impedance mode to activate
                                        ; previously configured port settings
        ; Enable LCD segments: 0-21, 26-43
        MOV     #0xFFFF, &LCDCPCTL0     ; 1111111111111111
        MOV     #0xFC3F, &LCDCPCTL1     ; 1111110000111111
        MOV     #0x0FFF, &LCDCPCTL2     ; 1111111111111111
          
        ; Initialize LCD 
        MOV     #0x041e,&LCDCCTL0       ; sets display with hardware specs needed
        MOV     #0x0208, &LCDCVCTL      ; enable voltage for display
        MOV     #0x8000, &LCDCCPCTL     ; enable clock synchronization
        MOV     #2, &LCDCMEMCTL         ; clear LCD memory (resets screen)
        BIS     #1, &LCDCCTL0            ; turn the LCD on

beginProgram:
        bic     #CCIE, &TA0CCTL0        ; Enable TACCR0 interrupt
        
        ; Display title screen
        MOV.w   #kasino, R10
        CALL    #SUB_displayStringOnLCD
        
        CALL    #PORT1_ISR ; Check if S1 is pressed


        ;Turn on the timer.
        mov     #CCIE, &TA0CCTL0        ; Enable TACCR0 interrupt
                                        ; This turns on the timer.

        mov     #TASSEL_2+MC_1+ID_3, &TA0CTL  ;Set timer according to next table
	nop
        ; Uses SMCLK and up mode
        ; TASSELx        MCx (mode control)                IDx (input divider)
        ; 00 -> TACLK    00 -> Stop                        00 -> /1
        ; 01 -> ACLK     01 -> Up mode (up to TACCR0)      01 -> /2
        ; 10 -> SMCLK    10 -> Continuous (up to 0FFFFh)   02 -> /4
        ; 11 -> INCLK    11 -> Up/down (top on TACCR0)     03 -> /8

        ; period = cycles * divider / SMLCK
        ; Assuming SMLCK = 1 MHz, divider = 8 and period = 0.125 seg
        ; cycles = 15625.  With period = 0.125 LED turn on every 1 second

        mov     #15625, &TA0CCR0        ; Set the timer capture compare register 0

        bic.b   #0000010b, &P1IFG       ; To erase a flag raised before
               	                        ; activating the GIE. This help to
                                        ; avoid responding to a push on button
                                        ; previous to program start.

	nop				; required befor enabling interrupts

        bis     #GIE+LPM0, SR           ; Enable interrupts and enter Low Power mode 0
                                        ; that doesn't disable timers
        nop                             ; Required after enabling interrupts

        JMP $                           ; jump to current location '$'
        NOP                             ; (endless loop)


;------------------------------------------------------------------------------
; Author: Jann C. Garcia
; Date: November 12, 2022
; Description:
; * Receives a starting address from R10, and displays the next 6 characters
; * on the LCD. 

; Pre-Conditions: 
; * R10 must denote a location of memory where a string commences
; * The string MUST be of bytes. Words will not work

; Post-Conditions: None
; Side Effects: None

SUB_displayStringOnLCD:
        ; Setup
        PUSH.w R10                      ; R10: Starting address in RAM of string
                                        ; Each position is an index for CharH/CharL
                                        ; Move 6 places and display each digit

        PUSH.w R11                      ; R11: Goes from 0-6
                                        ; Due to LCD addresses NOT being in order,
                                        ; we need to use LCD_offsets, which contains
                                        ; the correct offset for each segment of the LCD
                                        ; For example: segment 0 is 0xA29 (A20 + 9 offset)
                                        ; but segment 1 is 0xA25 (A20 + 5 offset)

        PUSH.w R12                      ; R12: The index of CharH/CharL
        
        MOV     #0, R11
        
displayLoop:

        MOV.b   @R10+, R12              ; Store the value AT (@) R10 into R12
                                        ; The + increments the value IN R10
                                        ; so that R10 will point to the next byte
                                        ; in RAM

        PUSH.W  R11                     ; Temporarily store R11's index
        
        MOV.b   LCD_offsets(R11), R11   ; Grab the current offset for R11
        MOV.b   CharH(R12), 0x0A20(R11)   ; High Byte
        MOV.b   CharL(R12), 0x0A20+1(R11) ; Low Byte
        
        POP.w   R11                     ; Restore R11's index
        INC.b   R11                     ; and increase it by 1
        
        CMP     #6, R11                 ; End if R11 has reached 6
        JL      displayLoop
        
        ; Restore original values to prevent side effects
        POP.w   R12
        POP.w   R11
        POP.w   R10
        
        RET
        

;------------------------------------------------------------------------------
TIMER_A0_ISR:

        xor.b #BIT7, P9OUT              ; just to toggle green LED each time the
                                        ; ISR is executed
        cmp #9, intsCounter             ; To toggle red LED each time the 
                                        ; interrupt counter reaches 10
        jnz noToggle
        xor.b #BIT0, P1OUT              ; Toggle red LED
                                        ; CCIFG automatically reset when entering
              	                        ; the ISR so no need to clear the flag
        mov #0, intsCounter
        jmp fin
noToggle:
        inc intsCounter
fin:
        reti
;------------------------------------------------------------------------------
;------------------------------------------------------------------------------

 ;Interrupt Service Routine (ISR) that is executed when button S1
 ;is pressed.

PORT1_ISR:
        bit.b   #00000010b, &P1IFG      ; Test if there is
                                        ; an interrupt generated by P1.1
                                        ; that corresponds to button S1.
                                        
        jz      fin                     ; if no interrupt from button S1
        
        bic.b   #00000010b, &P1IFG      ; Clear interrupt flag and check 
        cmp     #1, pushCount           ; if it is the first time S1 is pressed.
        jeq     displayIntroLoop        ; If not, go to light on green LED
        bis.b   #10000000b,&P9OUT       ; light on the green LED
        jmp     fin                     ; go to end of ISR

displayIntroLoop:
        bis.b   #00000001b,&P1OUT       ; turn on red LED and
        bis.b   #10000000b,&P9OUT       ; turn on the green LED
        CALL #introductoryLoop
        ; here we would start to display the first introductory loop
        ; to the game
        ;using the timer
        ; (subroutine doesnt exist yet)

        
fin:    inc     pushCount               ; Increment the pushes counter
        reti
;------------------------------------------------------------------------------
introductoryLoop:
        MOV.w   #record, R10
        CALL    #SUB_displayStringOnLCD
        ret
;------------------------------------------------------------------------------


        END
        